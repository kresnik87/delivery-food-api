# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  locale: 'es'
  app.db_in_files.root_folder: '%kernel.project_dir%/var/my-filesystem'
  project.root_path: '%kernel.project_dir%/../../..'

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  KsK\Apps\Delivery\Commands\:
    resource: '../src/Command'
    tags:
      - { name: 'console.command' }

  KsK\Apps\Delivery\Controller\:
    resource: '../src/Controller'
    tags: [ 'controller.service_arguments' ]

  KsK\Apps\Api\Action\:
    resource: '../src/Action'
    tags: [ 'controller.service_arguments' ]

  KsK\Apps\Api\ApiPlatform\:
    resource: '../src/ApiPlatform'

  KsK\Shared\:
    resource: '../../../src/Shared'

  _instanceof:
    KsK\Shared\Application\Bus\Command\CommandHandlerInterface:
      tags:
        - { name: messenger.message_handler, bus: command.bus }

    KsK\Shared\Application\Bus\Query\QueryHandlerInterface:
      tags:
        - { name: messenger.message_handler, bus: query.bus }

    KsK\Shared\Application\Bus\Event\DomainEventSubscriberInterface:
      tags:
        - { name: messenger.message_handler, bus: domainEvent.bus }


    KsK\Shared\Application\Bus\Event\NotificationEventSubscriberInterface:
      tags:
        - { name: messenger.message_handler, bus: notificationEvent.bus }

    KsK\Shared\Domain\Event\DomainEventInterface:
      tags: [ 'ksk.domain_event' ]

    KsK\Shared\Domain\Event\NotificationEventInterface:
      tags: [ 'ksk.notification_event' ]


  #SoftDelete Listener
  gedmo.listener.softdeleteable:
    class: Gedmo\SoftDeleteable\SoftDeleteableListener
    tags:
      - { name: doctrine.event_subscriber, connection: default }
    calls:
      - [ setAnnotationReader, [ '@annotation_reader' ] ]

  #JWTListener
  ksk_api.event.jwt_created_listener:
    class: KsK\Shared\Infrastructure\Security\JWTCreatedListener
    arguments: [ '@request_stack' ]
    tags:
      - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

  KsK\Shared\Infrastructure\Service\DomainEventMapper:
    tags:
      - { name: ksk.argument_loader, target_tag: ksk.domain_event }

  KsK\Shared\Infrastructure\Service\NotificationEventMapper:
    tags:
      - { name: ksk.argument_loader, target_tag: ksk.notification_event }

